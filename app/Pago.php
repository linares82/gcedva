<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use App\Traits\GetAllDataTrait;
use App\Traits\RelationManagerTrait;
use Illuminate\Database\Eloquent\SoftDeletes;
use Venturecraft\Revisionable\RevisionableTrait;

class Pago extends Model
{
	use RelationManagerTrait, GetAllDataTrait;
	use SoftDeletes;
	use RevisionableTrait;

	protected $revisionCleanup = true; //Remove old revisions (works only when used with $historyLimit)
	protected $historyLimit = 1000;

	public function __construct(array $attributes = array())
	{
		parent::__construct($attributes);
		$this->addRelationApp(new \App\Caja, 'id');  // generated by relation command - Caja,Pago
		$this->addRelationApp(new \App\FormaPago, 'name');  // generated by relation command - FormaPago,Pago
		$this->addRelationApp(new \App\CuentasEfectivo, 'name');  // generated by relation command - FormaPago,Pago
	}

	//Mass Assignment
	protected $fillable = [
		'caja_id',
		'monto',
		'fecha',
		'forma_pago_id',
		'referencia',
		'usu_alta_id',
		'usu_mod_id',
		'consecutivo',
		'cuenta_efectivo_id',
		'bnd_pagado',
		'bnd_referenciado',
		'csc_simplificado',
		'fecha_solicitud_factura',
		'uui',
		'cbb',
		'xml',
		'fecha_solicitud_factura',
		'serie_factura',
		'folio_facturados',
		'usu_delete_id',
		'bnd_reactivacion'
	];

	public function usu_alta()
	{
		return $this->hasOne('App\User', 'id', 'usu_alta_id');
	} // end

	public function usu_mod()
	{
		return $this->hasOne('App\User', 'id', 'usu_mod_id');
	} // end

	public function usu_delete()
	{
		return $this->hasOne('App\User', 'id', 'usu_delete_id');
	} // end


	protected $dates = ['deleted_at'];

	// generated by relation command - Caja,Pago - start
	public function caja()
	{
		return $this->belongsTo('App\Caja');
	} // end

	// generated by relation command - FormaPago,Pago - start
	public function formaPago()
	{
		return $this->belongsTo('App\FormaPago');
	} // end

	// generated by relation command - Pago,PeticionMultipago - start
	public function peticionMultipago()
	{
		return $this->hasOne('App\PeticionMultipago');
	} // end

	public function peticionOpenpays()
	{
		return $this->hasMany('App\PeticionOpenpay');
	} // end

	// generated by relation command - Pago,FacturaGeneralLinea - start
	public function facturaGeneralLineas()
	{
		return $this->hasMany('App\FacturaGeneralLinea');
	} // end

	// generated by relation command - Pago,AdeudoPagoOnLine - start
	public function adeudoPagoOnLines()
	{
		return $this->hasMany('App\AdeudoPagoOnLine');
	} // end

	public function peticionPaycode()
	{
		return $this->belongsTo('App\PeticionPaycode', 'id', 'pago_id');
	} // end
}
